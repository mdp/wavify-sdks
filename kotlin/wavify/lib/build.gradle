/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.1/userguide/building_java_projects.html
 */


plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'maven-publish'
}

version = '0.0.10'
group = 'dev.wavify'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'dev.wavify'
            artifactId = 'wavify'
            version = '0.0.10'

            pom {
                name = 'Wavify'
                description = 'On-device Speech-to-Text Engine'
                url = 'https://wavify.dev/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'manuel030'
                        name = 'Manuel Plank'
                        email = 'manuel@wavify.dev'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = uri("file://${buildDir}/repo")
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register('copyPrecompiledLibs', Copy) {
    from('../../lib/aarch64-linux-android')
    into("$buildDir/libs")
    include '*.dll', '*.so', '*.dylib'
}

tasks.named('jar') {
    dependsOn 'copyPrecompiledLibs'
    from("$buildDir/libs") {
        include '*.dll', '*.so', '*.dylib'
    }
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
        )
    }
}
